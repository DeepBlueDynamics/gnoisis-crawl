#!/usr/bin/env python3
"""
Simple test for gnosis-crawl with service token
Usage: python test_simple.py --service-token <token>
"""
import asyncio
import httpx
import argparse

async def get_jwt_token(service_token, ahp_url="http://localhost:5005"):
    """Exchange service token for JWT token via AHP"""
    print("üîë Getting JWT token from AHP...")
    
    try:
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.post(
                f"{ahp_url}/auth",
                json={"token": service_token}
            )
            
            if response.status_code == 200:
                data = response.json()
                jwt_token = data.get("token")
                print(f"‚úÖ Got JWT token: {jwt_token[:20]}...")
                return jwt_token
            else:
                print(f"‚ùå Failed to get JWT token: {response.status_code} - {response.text}")
                return None
    except Exception as e:
        print(f"‚ùå Error getting JWT token: {e}")
        return None

async def test_crawl_health(crawl_url, service_token):
    """Quick health + auth test"""
    print(f"üè• Testing {crawl_url}")
    
    try:
        async with httpx.AsyncClient(timeout=5.0) as client:
            # Test health (no auth)
            health_response = await client.get(f"{crawl_url}/health")
            if health_response.status_code == 200:
                print("‚úÖ Service is healthy")
            else:
                print(f"‚ùå Service unhealthy: {health_response.status_code}")
                return False
            
            # Get JWT token for authenticated tests
            jwt_token = await get_jwt_token(service_token)
            if not jwt_token:
                print("‚ùå Cannot test auth without JWT token")
                return False
            
            # Test authenticated endpoint
            headers = {"Authorization": f"Bearer {jwt_token}"}
            tools_response = await client.get(f"{crawl_url}/tools", headers=headers)
            
            if tools_response.status_code == 200:
                print("‚úÖ Authentication working")
                tools = tools_response.json().get("tools", [])
                print(f"   Available tools: {len(tools)}")
                return True
            else:
                print(f"‚ùå Auth failed: {tools_response.status_code}")
                print(f"   Response: {tools_response.text}")
                return False
                
    except Exception as e:
        print(f"‚ùå Connection failed: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(description="Simple crawl service test")
    parser.add_argument("--service-token", required=True, help="Service token")
    parser.add_argument("--crawl-url", default="http://localhost:6792", help="Crawl service URL")
    args = parser.parse_args()
    
    print("üß™ Simple Crawl Service Test")
    print("=" * 40)
    
    success = asyncio.run(test_crawl_health(args.crawl_url, args.service_token))
    
    if success:
        print("\nüéâ Ready for batch testing!")
        print(f"Next: python test_batch_crawl.py --service-token {args.service_token}")
    else:
        print("\n‚ùå Fix service issues before batch testing")

if __name__ == "__main__":
    main()